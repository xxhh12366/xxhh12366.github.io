<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>链表刷题</title>
      <link href="/2025/02/08/Leetcode/2025-02-08-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98/"/>
      <url>/2025/02/08/Leetcode/2025-02-08-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>为了熟悉链表使用，这题使用双指针法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个虚拟头节点，指向链表的头节点</span></span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        ListNode* first = head;  <span class="comment">// 快指针</span></span><br><span class="line">        ListNode* second = dummy; <span class="comment">// 慢指针</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 快指针先走 n 步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 快慢指针一起走，直到快指针到达链表末尾</span></span><br><span class="line">        <span class="keyword">while</span> (first) &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">            second = second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除倒数第 n 个节点</span></span><br><span class="line">        second-&gt;next = second-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回新链表的头节点</span></span><br><span class="line">        ListNode* ans = dummy-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> dummy;  <span class="comment">// 释放虚拟头节点的内存</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构学习</title>
      <link href="/2025/02/07/2025-02-07-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/02/07/2025-02-07-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Algorithms + Data Structures &#x3D; Programs</p><h3 id="关于c语言的基础补充"><a href="#关于c语言的基础补充" class="headerlink" title="关于c语言的基础补充"></a>关于c语言的基础补充</h3><p>字符串不是数据类型，通常用字符型数组表示字符串  </p><p>计算机结构，虚拟内存地址。<br>内存条，显卡，各种适配器都有其各自的存储地址空间，<br>这些空间被抽象成巨大的一维数组空间<br><img src="/../picture/for_post/DataStructures/ComputerArchitecture.jpg" alt="alt text">  </p><p>当结构体比较大时，直接传递结构体变量会导致整个结构体的数据被复制一份，<strong>一般通过指针传递结构体变量</strong>，<br>使用时：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个较大的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">double</span> scores[<span class="number">10</span>];</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递结构体指针</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudentInfo</span><span class="params">(Student *s)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name: %s, Age: %d\n&quot;</span>, s-&gt;name, s-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student s;</span><br><span class="line">    <span class="built_in">strcpy</span>(s.name, <span class="string">&quot;John&quot;</span>);</span><br><span class="line">    s.age = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 传递指针</span></span><br><span class="line">    <span class="built_in">printStudentInfo</span>(&amp;s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>内存分类</strong><br>关于动态内存。malloc分配，free释放。java中的垃圾回收机制，c++中的析构函数，底层就是使用free函数释放内存</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="comment">//sizeof(int)可用性更高，约定俗成</span></span><br><span class="line">    <span class="comment">//结构体由于补位的存在，所含字节不固定</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../picture/for_post/DataStructures/MemoryAllocation.jpg" alt="alt text"></p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><h4 id="大-O-记法能客观地衡量各种算法的时间复杂度，是比较算法的利器"><a href="#大-O-记法能客观地衡量各种算法的时间复杂度，是比较算法的利器" class="headerlink" title="大 O 记法能客观地衡量各种算法的时间复杂度，是比较算法的利器"></a>大 O 记法能客观地衡量各种算法的时间复杂度，是比较算法的利器</h4><p>O(N), 处理一个 N元素的数组需花 N步的算法的效率——线性时间<br>二分查找的大 O 记法是：O(log N) ——对数时间</p><p><strong>线性表（包含顺序表与链表）</strong>  </p><h4 id="顺序表：物理位置联续"><a href="#顺序表：物理位置联续" class="headerlink" title="顺序表：物理位置联续"></a>顺序表：物理位置联续</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于顺序表尾部增加元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">apppendElem</span><span class="params">(SeqList *L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L-&gt;length&gt;=MAXSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;已满&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data[L-&gt;length] = e;</span><br><span class="line">    <span class="comment">//此处，由于data是数组，故其元素是有顺序的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果结构体中包含动态数据结构（如链表、树、图等），动态内存分配是必要的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于顺序表的动态分配内存初始化</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType *data;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function">SeqList* <span class="title">initList</span><span class="params">(SeqList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqList *L = (SeqList*)<span class="built_in">malloc</span>(<span class="built_in">sieof</span>(SeqList));</span><br><span class="line">    <span class="comment">//因为malloc默认开辟的的void*类型的内存空间，故要进行强制类型转换</span></span><br><span class="line">    L-&gt;data = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType)*MAXSIZE);</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>本质是指向地址，由一个结构体跳到另一个结构体</p><p><em>技巧：双指针法。通过快慢指针快速定位到指定倒数第几位的数</em><br>快慢指针间隔一定位置后同步前进，当快指针为NULL，慢指针即为所求</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>opencv学习（2）</title>
      <link href="/2025/02/05/2025-02-05-Opencv%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/"/>
      <url>/2025/02/05/2025-02-05-Opencv%E5%AD%A6%E4%B9%A0%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在VS中使用Opencv<br>每个项目单独导入opencv（在项目属性的包含目录与库目录的）<br>链接器导入对应版本的lib</p><p>Background:<br>0 &#x3D; black<br>255 &#x3D; white<br>8 bits &#x3D; 256 levels</p><h3 id="1-导入图像视频和网络摄像头"><a href="#1-导入图像视频和网络摄像头" class="headerlink" title="1. 导入图像视频和网络摄像头"></a><strong>1. 导入图像视频和网络摄像头</strong></h3><p>常用头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;opencv2/imgcodecs.hpp&gt;：这个头文件包含了用于图像编码和解码的函数，例如读取和保存图像文件（如 JPEG、PNG 等）。</span></span><br><span class="line"><span class="comment">// #include &lt;opencv2/highgui.hpp&gt;：该头文件提供了高级图形用户界面功能，比如创建窗口、显示图像、处理鼠标和键盘事件等。</span></span><br><span class="line"><span class="comment">// #include &lt;opencv2/imgproc.hpp&gt;：此头文件包含了大量的图像处理函数，如图像滤波、边缘检测、图像变换等。</span></span><br><span class="line"><span class="comment">// #include &lt;iostream&gt;：这是标准输入输出流的头文件，用于在控制台进行输入输出操作。</span></span><br></pre></td></tr></table></figure><p>导入图像<br>（注意c++和python的imread格式不同）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////  Images  //////////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/test.png&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);<span class="comment">//图像要写成 matrix data type</span></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视频播放</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////  Video  //////////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/test_video.mp4&quot;</span>;</span><br><span class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(path)</span></span>;</span><br><span class="line">    Mat img;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        cap.<span class="built_in">read</span>(img);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">20</span>);<span class="comment">//图片播放delay的时间，单位时间为ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>摄像头</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////  Webcam  //////////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">VideoCapture <span class="title">cap</span><span class="params">(<span class="number">0</span>)</span></span>;<span class="comment">//Id number of camera</span></span><br><span class="line">    Mat img;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        cap.<span class="built_in">read</span>(img);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">1</span>);<span class="comment">//图片播放delay的时间，单位时间为ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-图像处理基础功能"><a href="#2-图像处理基础功能" class="headerlink" title="2. 图像处理基础功能"></a><strong>2. 图像处理基础功能</strong></h3><p>vs不能单文件运行，与python不同，当多文件并存，要么是注释，要么是排除（就是文件图标上会显示红叉）<br><em>后续会学习轨迹框的使用，通过轨迹框得到最佳检测</em>  </p><p>包括灰度，模糊，膨胀和腐蚀</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////Basic Function/////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/test.png&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgGray, imgBlur, imgCanny, imgDil, imgErode;<span class="comment">//c++中的数据都要先定义</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);<span class="comment">//意为 BGR to GRAY</span></span><br><span class="line">    <span class="comment">//等同于imgGray = cvtColor(img, COLOR_BGR2GRAY);</span></span><br><span class="line">    <span class="built_in">GaussianBlur</span>(imgGray, imgBlur, <span class="built_in">Size</span>(<span class="number">3</span>,<span class="number">3</span>), <span class="number">3</span>, <span class="number">0</span>);<span class="comment">//guassian blur高斯模糊</span></span><br><span class="line">    <span class="built_in">Canny</span>(imgBlur, imgCanny, <span class="number">50</span>,<span class="number">150</span>);</span><br><span class="line">    <span class="comment">//一般用canny edge detector 前要模糊处理</span></span><br><span class="line">    <span class="comment">//不模糊的话会有多余的线条</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过膨胀和腐蚀处理边缘，二者叠加使用</span></span><br><span class="line">    Mat kernel = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">5</span>,<span class="number">5</span>));<span class="comment">//Size用奇数</span></span><br><span class="line">    <span class="built_in">dilate</span>(imgCanny, imgDil, kernel);<span class="comment">//kernel作为膨胀的内核，要用矩阵type</span></span><br><span class="line">    <span class="built_in">erode</span>(imgDil, imgErode, kernel);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgGray&quot;</span>, imgGray);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgBlur&quot;</span>, imgBlur);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgCanny&quot;</span>, imgCanny);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgDilation&quot;</span>, imgDil);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgErode&quot;</span>, imgErode);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-调整大小及裁剪图像"><a href="#3-调整大小及裁剪图像" class="headerlink" title="3. 调整大小及裁剪图像"></a><strong>3. 调整大小及裁剪图像</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////Resize and Crop/////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/test.png&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgResize, imgCrop;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; img.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">resize</span>(img, imgResize, <span class="built_in">Size</span>(<span class="number">640</span>, <span class="number">480</span>));<span class="comment">//拉伸大小</span></span><br><span class="line">    <span class="built_in">resize</span>(img, imgResize, <span class="built_in">Size</span>(), <span class="number">0.5</span>, <span class="number">0.5</span>);<span class="comment">//按比例缩放</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Rect <span class="title">roi</span><span class="params">(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">250</span>)</span></span>;<span class="comment">//用于在图像或二维空间里描述矩形区域</span></span><br><span class="line">    imgCrop = <span class="built_in">img</span>(roi);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgResize&quot;</span>, imgResize);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgCrop&quot;</span>, imgCrop);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-绘制形状与文字"><a href="#4-绘制形状与文字" class="headerlink" title="4. 绘制形状与文字"></a><strong>4. 绘制形状与文字</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////Draw Shapes and Text/////////////////</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Mat <span class="title">img</span><span class="params">(<span class="number">512</span>, <span class="number">512</span>, CV_8UC3, Scalar(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span></span>;</span><br><span class="line">    <span class="comment">//CV_8UC3：这是一个用于指定矩阵元素类型的标志。具体含义如下：</span></span><br><span class="line">    <span class="comment">//8U：表示每个元素是一个无符号的 8 位整数（范围从 0 到 255）。</span></span><br><span class="line">    <span class="comment">//C3：表示矩阵有 3 个通道。在图像处理中，3 个通道通常对应 BGR 颜色空间，分别代表蓝色（Blue）、绿色（Green）和红色（Red）。</span></span><br><span class="line">    <span class="comment">//Scalar 是 OpenCV 中用于表示多通道值的类</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">circle</span>(img, <span class="built_in">Point</span>(<span class="number">256</span>, <span class="number">256</span>), <span class="number">155</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),FILLED);<span class="comment">//由圆心，半径确定</span></span><br><span class="line">    <span class="built_in">rectangle</span>(img, <span class="built_in">Point</span>(<span class="number">256</span>, <span class="number">256</span>), <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">52</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">line</span>(img, <span class="built_in">Point</span>(<span class="number">256</span>, <span class="number">256</span>), <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>), <span class="built_in">Scalar</span>(<span class="number">100</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">putText</span>(img, <span class="string">&quot;GGGGG&quot;</span>, <span class="built_in">Point</span>(<span class="number">50</span>,<span class="number">50</span>), FONT_HERSHEY_DUPLEX, <span class="number">2</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="comment">//设置了字体和比例大小</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br></pre></td></tr></table></figure><h3 id="5-扭曲图像"><a href="#5-扭曲图像" class="headerlink" title="5.扭曲图像"></a><strong>5.扭曲图像</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////Warp Images/////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> w = <span class="number">250</span>, h = <span class="number">350</span>;</span><br><span class="line">Mat matrix, imgWarp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/cards.jpg&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line"></span><br><span class="line">    Point2f src[<span class="number">4</span>] = &#123; &#123;<span class="number">529</span>,<span class="number">142</span>&#125;, &#123;<span class="number">771</span>,<span class="number">190</span>&#125;, &#123;<span class="number">405</span>,<span class="number">395</span>&#125;, &#123;<span class="number">674</span>,<span class="number">457</span>&#125; &#125;;<span class="comment">//source points</span></span><br><span class="line">    Point2f dst[<span class="number">4</span>] = &#123; &#123;<span class="number">0.0f</span>,<span class="number">0.0f</span>&#125;, &#123;w,<span class="number">0.0f</span>&#125;, &#123;<span class="number">0.0f</span>,h&#125;, &#123;w,h&#125; &#125;;<span class="comment">//destination points</span></span><br><span class="line"></span><br><span class="line">    matrix = <span class="built_in">getPerspectiveTransform</span>(src, dst);</span><br><span class="line">    <span class="built_in">warpPerspective</span>(img, imgWarp, matrix, <span class="built_in">Point</span>(w, h));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;i++)<span class="comment">//用for来标记出选择的点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">circle</span>(img, src[i], <span class="number">10</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">69</span>, <span class="number">255</span>), FILLED);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;ImgWarp&quot;</span>, imgWarp);</span><br><span class="line">    <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-图像色彩检测"><a href="#6-图像色彩检测" class="headerlink" title="6.图像色彩检测"></a><strong>6.图像色彩检测</strong></h3><p>通过滑动条，等显示的只剩下目标颜色，此时hsv值为所需</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/////////////////Color Detection/////////////////</span></span><br><span class="line"></span><br><span class="line">Mat imgHSV, mask, imgHSV1;</span><br><span class="line"><span class="type">int</span> hmin = <span class="number">0</span>, smin = <span class="number">110</span>, vmin = <span class="number">153</span>;</span><br><span class="line"><span class="type">int</span> hmax = <span class="number">19</span>, smax = <span class="number">240</span>, vmax = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/lambo.png&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//hsv space 色相饱和度值</span></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgHSV, COLOR_BGR2HSV);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">namedWindow</span>(<span class="string">&quot;Trackbars&quot;</span>, (<span class="number">640</span>, <span class="number">200</span>));</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Hue Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;hmin, <span class="number">179</span>);<span class="comment">//更改hmin</span></span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Hue Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;hmax, <span class="number">179</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Sat Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;smin, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Sat Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;smax, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Val Min&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;vmin, <span class="number">255</span>);</span><br><span class="line">    <span class="built_in">createTrackbar</span>(<span class="string">&quot;Val Max&quot;</span>, <span class="string">&quot;Trackbars&quot;</span>, &amp;vmax, <span class="number">255</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="function">Scalar <span class="title">lower</span><span class="params">(hmin, smin, vmin)</span></span>;</span><br><span class="line">        <span class="function">Scalar <span class="title">upper</span><span class="params">(hmax, smax, vmax)</span></span>;</span><br><span class="line">        <span class="built_in">inRange</span>(imgHSV, lower, upper, mask);</span><br><span class="line">        <span class="comment">//mask 值最终输出，蒙版</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;ImgWarp&quot;</span>, imgHSV);</span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;ImgMask&quot;</span>, mask);</span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">1</span>);<span class="comment">//waitKey(0) 会使程序一直阻塞等待按键事件，滑动条无法实时响应操作。应该使用 waitKey(1) 让程序持续运行并处理滑动条的变化。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-图像形状检测"><a href="#7-图像形状检测" class="headerlink" title="7.图像形状检测"></a><strong>7.图像形状检测</strong></h3><p>边缘检测出轮廓再来对应<br>这里的函数，预处理格式要熟悉，注意规范使用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////Shape Detection/////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getContours</span><span class="params">(Mat imgDil, Mat img)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">//需要定义轮廓，是矢量</span></span><br><span class="line">    vector&lt;vector&lt;Point&gt;&gt; contours;<span class="comment">//向量包含向量包含点</span></span><br><span class="line">    vector&lt;Vec4i&gt; hierarchy;</span><br><span class="line">    <span class="built_in">findContours</span>(imgDil, contours, hierarchy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);<span class="comment">//存储对象信息</span></span><br><span class="line">    <span class="comment">//drawContours(img, contours, -1, Scalar(255, 0, 255), 2);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; contours.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> area = <span class="built_in">contourArea</span>(contours[i]);</span><br><span class="line">        vector&lt;vector&lt;Point&gt;&gt; <span class="built_in">conPloy</span>(contours.<span class="built_in">size</span>());<span class="comment">//角点，也应该写出向量格式</span></span><br><span class="line">        <span class="function">vector&lt;Rect&gt; <span class="title">boundRect</span><span class="params">(contours.size())</span></span>;<span class="comment">//括号里指的是变量数量</span></span><br><span class="line">        string objectType;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (area &gt; <span class="number">1000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> peri = <span class="built_in">arcLength</span>(contours[i], <span class="literal">true</span>);<span class="comment">//使用轮廓找到弧长</span></span><br><span class="line">            <span class="built_in">approxPolyDP</span>(contours[i], conPloy[i], <span class="number">0.02</span> * peri, <span class="literal">true</span>);<span class="comment">//Define a new array, 寻找角点再判断是几边形</span></span><br><span class="line">            <span class="comment">//drawContours(img, conPloy, i, Scalar(255, 0, 255), 2);</span></span><br><span class="line"></span><br><span class="line">            boundRect[i] = <span class="built_in">boundingRect</span>(conPloy[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//tl = top_left;br = bottom_right</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//为了找到哪个是哪个图形——显示文字</span></span><br><span class="line">            <span class="type">int</span> objCor = (<span class="type">int</span>)conPloy[i].<span class="built_in">size</span>();<span class="comment">// create integer objects corner</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (objCor == <span class="number">3</span>) &#123; objectType = <span class="string">&quot;Tri&quot;</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (objCor == <span class="number">4</span>) &#123; </span><br><span class="line">                <span class="comment">//再来细分出矩形中的正方形。长宽就由轮廓width与height来表示</span></span><br><span class="line">                <span class="comment">//要把vector强制类型转换成float</span></span><br><span class="line">                <span class="type">float</span> aspRatio = (<span class="type">float</span>)boundRect[i].width / (<span class="type">float</span>)boundRect[i].height;</span><br><span class="line">                <span class="keyword">if</span>(aspRatio&gt; <span class="number">0.95</span>&amp;&amp; aspRatio &lt;<span class="number">1.05</span>)objectType = <span class="string">&quot;Square&quot;</span>;<span class="comment">//要考虑到误差</span></span><br><span class="line">                <span class="keyword">else</span> objectType = <span class="string">&quot;Rect&quot;</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (objCor &gt; <span class="number">4</span>) &#123; objectType = <span class="string">&quot;Circle&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">putText</span>(img, objectType, &#123; boundRect[i].x, boundRect[i].y - <span class="number">5</span> &#125;, FONT_HERSHEY_DUPLEX, <span class="number">0.75</span>, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            <span class="built_in">rectangle</span>(img, boundRect[i].<span class="built_in">tl</span>(), boundRect[i].<span class="built_in">br</span>(), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">30</span>, <span class="number">30</span>), <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/shapes.png&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgGray, imgBlur, imgCanny, imgDil, imgErode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Preprocessing</span></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(imgGray, imgBlur, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Canny</span>(imgBlur, imgCanny, <span class="number">25</span>, <span class="number">75</span>);<span class="comment">//开始设置（55，155）使有图形识别不出来</span></span><br><span class="line">    Mat kernel = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="built_in">dilate</span>(imgCanny, imgDil, kernel);<span class="comment">//加粗更好</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">getContours</span>(imgDil, img);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="comment">//imshow(&quot;ImgGray&quot;, imgGray);</span></span><br><span class="line">        <span class="comment">//imshow(&quot;ImgBlur&quot;, imgBlur);</span></span><br><span class="line">        <span class="comment">//imshow(&quot;ImgCanny&quot;, imgCanny);</span></span><br><span class="line">        <span class="comment">//imshow(&quot;ImgDil&quot;, imgDil);</span></span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-人脸识别"><a href="#8-人脸识别" class="headerlink" title="8.人脸识别"></a><strong>8.人脸识别</strong></h3><p>这里需要用到大模型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgcodecs.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;opencv2/objdetect.hpp&gt;</span><span class="comment">//物品识别要另外加入的头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">/////////////////Face Detection/////////////////</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    string path = <span class="string">&quot;Resources/test.png&quot;</span>;</span><br><span class="line">    Mat img = <span class="built_in">imread</span>(path);</span><br><span class="line">    Mat imgGray, imgBlur, imgCanny, imgDil, imgErode;</span><br><span class="line"></span><br><span class="line">    CascadeClassifier faceCascade;</span><br><span class="line">    faceCascade.<span class="built_in">load</span>(<span class="string">&quot;Resources/haarcascade_frontalface_default.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//这个xml文件是训练好的大模型</span></span><br><span class="line">    <span class="comment">//use this xml file to load our cascade and use it to find the faces</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//if (faceCascade.empty()) &#123; cout &lt;&lt; &quot;XML file not loaded&quot; &lt;&lt; endl; &#125;//检测是否load成功</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//create bounding boxes</span></span><br><span class="line">    vector &lt;Rect&gt; faces;</span><br><span class="line">    faceCascade.<span class="built_in">detectMultiScale</span>(img, faces, <span class="number">1.1</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; faces.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">rectangle</span>(img, faces[i].<span class="built_in">tl</span>(), faces[i].<span class="built_in">br</span>(), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//和上一个，用矩形圈定图形一样，矩形的坐标从向量中获得</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Preprocessing</span></span><br><span class="line">    <span class="built_in">cvtColor</span>(img, imgGray, COLOR_BGR2GRAY);</span><br><span class="line">    <span class="built_in">GaussianBlur</span>(imgGray, imgBlur, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Canny</span>(imgBlur, imgCanny, <span class="number">25</span>, <span class="number">75</span>);<span class="comment">//开始设置（55，155）使有图形识别不出来</span></span><br><span class="line">    Mat kernel = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="built_in">dilate</span>(imgCanny, imgDil, kernel);<span class="comment">//加粗更好</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">imshow</span>(<span class="string">&quot;Image&quot;</span>, img);</span><br><span class="line">        <span class="comment">//imshow(&quot;ImgGray&quot;, imgGray);</span></span><br><span class="line">        <span class="comment">//imshow(&quot;ImgBlur&quot;, imgBlur);</span></span><br><span class="line">        <span class="comment">//imshow(&quot;ImgCanny&quot;, imgCanny);</span></span><br><span class="line">        <span class="comment">//imshow(&quot;ImgDil&quot;, imgDil);</span></span><br><span class="line">        <span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>opencv学习（1）</title>
      <link href="/2025/02/04/2025-02-04-Opencv%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/"/>
      <url>/2025/02/04/2025-02-04-Opencv%E5%AD%A6%E4%B9%A0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><em><strong>关于python下的opencv简单使用</strong></em></p><p><strong>1. 取色，显示灰度图</strong><br>对于Opencv，存储一张彩色图片等同于存储三张灰度图（范围为0-255）<br>三张灰度图存储在图像数据的第三个维度上，对颜色的存储数据与RGB相反</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cv2.imshow(<span class="string">&quot;blue&quot;</span>, image[:, :, <span class="number">0</span>])</span><br><span class="line">cv2.imshow(<span class="string">&quot;green&quot;</span>, image[:, :, <span class="number">1</span>])</span><br><span class="line">cv2.imshow(<span class="string">&quot;red&quot;</span>, image[:, :, <span class="number">2</span>])  </span><br></pre></td></tr></table></figure><p><strong>2. 彩色图像的灰度变换算法</strong><br>将三个彩色通道的图像作平方和加权平均<br>其图像也可视作相机cmos芯片上接受光子数的分布图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;gray&#x27;</span>, gray)</span><br></pre></td></tr></table></figure><p><strong>3. 图像的裁剪</strong><br>使用索引号取出图像的一部分<br>索引顺序为先横行后纵列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crop = image[<span class="number">100</span>:<span class="number">150</span>, <span class="number">100</span>:<span class="number">150</span>]</span><br><span class="line">cv2.imshow(<span class="string">&#x27;image&#x27;</span>, crop)</span><br></pre></td></tr></table></figure><p><strong>4. Opencv的绘制功能，需要使用numpy工具包</strong><br>Opencv 图像数据，实际是numpy数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image = np.zeros([<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>], np.uint8)</span><br><span class="line"><span class="comment">#空白画布</span></span><br><span class="line"><span class="comment">#300 行、300 列，且每个元素有 3 个通道的矩阵</span></span><br><span class="line"><span class="comment">#np.uint8 表示无符号 8 位整数，取值范围是 0 到 255，这也是图像数据中常用的数据类型</span></span><br><span class="line">cv2.line(image, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">300</span>,<span class="number">300</span>), (<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="number">1</span>)</span><br><span class="line"><span class="comment">#线段的，起点坐标，终点坐标，颜色，粗细</span></span><br><span class="line"><span class="comment">#这里的color=(255,0,0)指的是，blue为255</span></span><br><span class="line">cv2.rectangle(image, (<span class="number">0</span>, <span class="number">20</span>), (<span class="number">20</span>,<span class="number">40</span>), (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">cv2.circle(image, (<span class="number">20</span>, <span class="number">20</span>), <span class="number">20</span>, (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>), <span class="number">1</span>)<span class="comment">#粗细为负，表示填充</span></span><br><span class="line">cv2.putText(image, <span class="string">&quot;hello&quot;</span>, (<span class="number">100</span>,<span class="number">50</span>), <span class="number">0</span>,<span class="number">1</span>,(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br></pre></td></tr></table></figure><p><strong>5. Opencv的均值滤波</strong><br>使用均值滤波器处理图片中的噪点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">guess = cv2.GaussianBlur(image,(<span class="number">5</span>,<span class="number">5</span>),<span class="number">0</span>)</span><br><span class="line"><span class="comment">#最后一个数，意为sigma由内核大小决定</span></span><br><span class="line"><span class="comment">#高斯滤波器——噪点减少，但也破坏图像细节</span></span><br><span class="line">median = cv2.medianBlur(image,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#噪点进一步减少</span></span><br><span class="line"><span class="comment"># 一般图片只会有少数噪点，用均值滤波消除，方便后续图片操作</span></span><br></pre></td></tr></table></figure><p><strong>6. 图像特征的提取</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)<span class="comment">#先转成灰度</span></span><br><span class="line">corners = cv2.goodFeaturesToTrack(gray, <span class="number">100</span>, <span class="number">0.01</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> corner <span class="keyword">in</span> corners:</span><br><span class="line">    x, y = corner.ravel()</span><br><span class="line">    cv2.circle(image, (<span class="built_in">int</span>(x), <span class="built_in">int</span>(y)), <span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), -<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#通过绘制圆来标记特征点</span></span><br></pre></td></tr></table></figure><p><strong>7. 模板匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">template = gray[<span class="number">75</span>:<span class="number">105</span>, <span class="number">235</span>:<span class="number">265</span>]</span><br><span class="line"><span class="comment">#挑出特征区域</span></span><br><span class="line"><span class="keyword">match</span> = cv2.matchTemplate(gray, template, cv2.TM_CCOEFF_NORMED)</span><br><span class="line"><span class="comment">#cv2.TM_CCOEFF_NORMED为标准相关匹配算法，将两个图像标准化，再计算匹配度</span></span><br><span class="line"></span><br><span class="line">locations = np.where(<span class="keyword">match</span> &gt;= <span class="number">0.9</span>)</span><br><span class="line"><span class="comment">#locations里含有多个匹配上的特征模板的位置坐标</span></span><br><span class="line">w, h = template.shape[<span class="number">0</span>:<span class="number">2</span>]<span class="comment">#得到template的长和宽</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">zip</span>(*locations[::-<span class="number">1</span>]):</span><br><span class="line"><span class="comment">#注意python中数组调用方法</span></span><br><span class="line"><span class="comment">#[::-1] 是 Python 中切片操作的一种写法，它的作用是将 locations 进行反转。例如，如果 locations = [1, 2, 3]，那么 locations[::-1] 的结果就是 [3, 2, 1]</span></span><br><span class="line"><span class="comment">#* 是 Python 中的解包运算符。它的作用是将 locations[::-1] 这个可迭代对象中的元素解包出来。假设 locations = [[1, 2], [3, 4]]，那么 locations[::-1] 为 [[3, 4], [1, 2]]，*locations[::-1] 就会把 [3, 4] 和 [1, 2] 作为独立的参数传递给后续的函数或操作。</span></span><br><span class="line"><span class="comment">#zip() 是 Python 的内置函数，它接受多个可迭代对象作为参数，将这些可迭代对象中对应位置的元素打包成一个个元组，然后返回由这些元组组成的迭代器。例如，zip([1, 2], [3, 4]) 会返回一个迭代器，迭代器中的元素为 (1, 3) 和 (2, 4)。结合前面的解包操作，zip(*locations[::-1]) 会对反转后的 locations 中每个可迭代元素进行对应位置的打包。</span></span><br><span class="line">    x1, y1 = p[<span class="number">0</span>], p[<span class="number">1</span>]</span><br><span class="line">    x2, y2 = x1 + w, y1 + h</span><br><span class="line">    cv2.rectangle(image, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment">#此方法对大小敏感。若要找出所有大小的，则放缩图片多试几次</span></span><br></pre></td></tr></table></figure><p><strong>8. 图像的梯度算法</strong><br>图像梯度 &#x3D; 图像明暗变化<br>所以，颜色变化越迅速，即梯度下降越快，颜色越浅<br>（在灰度图下，则可以用作边缘检测）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">image = cv2.imread(<span class="string">&#x27;opencv_logo.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">laplacian = cv2.Laplacian(image, cv2.CV_64F)</span><br><span class="line"><span class="comment">#拉普拉斯算子，大致对应图像的二阶导数</span></span><br><span class="line">canny = cv2.Canny(image, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">#卡尼算法，使用梯度区间来定义边缘</span></span><br><span class="line"><span class="comment">#梯度大于200，确定为边缘。小于100，确定为非边缘</span></span><br></pre></td></tr></table></figure><p><strong>9. 阈值算法</strong><br>即二值化算法，将灰度图像分为黑与白<br>*注意Photoshop与opencv的共通</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ret, thresh = cv2.threshold(image, <span class="number">10</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"><span class="comment">#阈值为10，最大灰度255</span></span><br><span class="line">binary_adaptive = cv2.adaptiveThreshold(image, <span class="number">255</span>,</span><br><span class="line">                    cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,<span class="number">115</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">#分区域，每个区域设置不同自适应阈值</span></span><br><span class="line">ret1, binary_otsu = cv2.threshold(image, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY + cv2.THRESH_OTSU)</span><br><span class="line"><span class="comment">#大金算法，不需要人为的确定阈值——聚类分析算法</span></span><br></pre></td></tr></table></figure><p><strong>10. 图像形态学（其中的腐蚀与膨胀）</strong><br>操作需要基于二值化图像<br>腐蚀与膨胀，常用于清理图像边缘细节<br>交替使用腐蚀与膨胀，可以获得更多细节，比如封闭与空腔</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_, binary = cv2.threshold(image, <span class="number">200</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</span><br><span class="line"><span class="comment">#二值化，使用反向阈值</span></span><br><span class="line">kernel = np.ones((<span class="number">5</span>, <span class="number">5</span>), np.uint8)</span><br><span class="line">erosion = cv2.erode(binary, kernel, iterations=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#使用kernel来腐蚀binary</span></span><br><span class="line">dilation = cv2.dilate(binary, kernel, iterations=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#使用kernel来膨胀binary</span></span><br></pre></td></tr></table></figure><p><strong>11. 使用电脑的摄像头</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#摄像头序号</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#重复读取每一帧</span></span><br><span class="line">    ret, frame = capture.read()</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;camera&#x27;</span>,frame)</span><br><span class="line">    key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> key != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">capture.release()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/01/23/2025-01-23-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/01/23/2025-01-23-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>PS:<br>在编程时，新建项目时，存储的地方<br>VS，新建的项目自成文件夹，项目名是文件夹名<br>Keil，不会自成文件夹，项目名是dja文件名</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/01/23/2025-02-07-Opencv%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%96%91%E9%9A%BE%E7%82%B9/"/>
      <url>/2023/01/23/2025-02-07-Opencv%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E7%96%91%E9%9A%BE%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="易错"><a href="#易错" class="headerlink" title="易错"></a>易错</h3><ol><li>BGR(255,255,255)是白色！在白色背景下无法显示</li></ol><p><strong>Q1:色彩深度与颜色系统</strong><br>相机中的8 bit &#x3D; 电脑中的8位通道<br>指 $2^8$ &#x3D; 256 种灰度<br>jpg为 8 bit色深， raw为 14 bit色深</p><p>RGB——三原色<br>HSV——H(Hue，色相)，S(Saturation，饱和度)，V(Brightness，明度)</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
